from collections import Counter

import matplotlib.pyplot as plt
import numpy as np
import pennylane as qml
import sklearn.datasets
import sklearn.decomposition
import torch
import pandas as pd
from matplotlib.lines import Line2D
from matplotlib.patches import Patch

dataset = pd.read_csv("Data1_3000.csv", sep=';')
dataset

for col_name in dataset.columns: 
    yxg = len(dataset[col_name].unique().tolist())
    if yxg == 1:
        print(col_name)
        del dataset[col_name]

dataset

label = dataset['labels']
y = np.array(label)
value = dataset
del value['labels']
x = np.array(value)

ddos = 0
benign = 0
for i in range(len(y)):
    if y[i] == 1:
        ddos += 1
    else:
        benign += 1
print('ddos = ', ddos)
print('benign = ', benign)

np.warnings.filterwarnings('ignore', category=np.VisibleDeprecationWarning)
np.random.seed(1967)
x, y = zip(*np.random.permutation(list(zip(x, y))))

n_features = 2
n_classes = 2 
n_samples = 2999

pca = sklearn.decomposition.PCA(n_components=n_features)
pca.fit(x)
x = pca.transform(x)
x.shape

x_min = np.min(x, axis=0)
x_max = np.max(x, axis=0)
x = 2 * np.pi * (x - x_min) / (x_max - x_min) - np.pi

split = int(n_samples - (n_samples*0.3))
print("Train data :", split)
print("Test data  :", n_samples-split)

x_train = x[:split]
x_test = x[split:]
y_train = y[:split]
y_test = y[split:]

colours = ["#ec6f86", "#4573e7", "#ad61ed"]


def plot_points(x_train, y_train, x_test, y_test):
    c_train = []
    c_test = []

    for y in y_train:
        c_train.append(colours[y])

    for y in y_test:
        c_test.append(colours[y])

    plt.scatter(x_train[:, 0], x_train[:, 1], c=c_train)
    plt.scatter(x_test[:, 0], x_test[:, 1], c=c_test, marker="x")

    plt.xlabel("Feature 1", fontsize=16)
    plt.ylabel("Feature 2", fontsize=16)

    ax = plt.gca()
    ax.set_aspect(1)

    c_transparent = "#00000000"

    custom_lines = [
        Patch(facecolor=colours[0], edgecolor=c_transparent, label="Class 0"),
        Patch(facecolor=colours[1], edgecolor=c_transparent, label="Class 1"),
        Patch(facecolor=colours[2], edgecolor=c_transparent, label="Class 2"),
        Line2D([0], [0], marker="o", color=c_transparent, label="Train",
               markerfacecolor="black", markersize=10),
        Line2D([0], [0], marker="x", color=c_transparent, label="Test",
               markerfacecolor="black", markersize=10),
    ]

    ax.legend(handles=custom_lines, bbox_to_anchor=(1.0, 0.75))


plot_points(x_train, y_train, x_test, y_test)
plt.show()

n_wires = 4

dev0 = qml.device("rigetti.qvm", device="4q-qvm")
dev1 = qml.device("qiskit.aer", wires=4)
devs = [dev0, dev1]

def circuit0(params, x=None):
    for i in range(n_wires):
        qml.RX(x[i % n_features], wires=i)
        qml.Rot(*params[1, 0, i], wires=i)

    qml.CZ(wires=[1, 0])
    qml.CZ(wires=[1, 2])
    qml.CZ(wires=[3, 0])

    for i in range(n_wires):
        qml.Rot(*params[1, 1, i], wires=i)
    return qml.expval(qml.PauliZ(0)), qml.expval(qml.PauliZ(1))


def circuit1(params, x=None):
    for i in range(n_wires):
        qml.RX(x[i % n_features], wires=i)
        qml.Rot(*params[0, 0, i], wires=i)

    qml.CZ(wires=[0, 1])
    qml.CZ(wires=[1, 2])
    qml.CZ(wires=[1, 3])

    for i in range(n_wires):
        qml.Rot(*params[0, 1, i], wires=i)
    return qml.expval(qml.PauliZ(0)), qml.expval(qml.PauliZ(1))

qnodes = [
    qml.QNode(circuit0, dev0, interface="torch"),
    qml.QNode(circuit1, dev1, interface="torch"),
]

import tensorflow as tf

n_classes = 2 #label 
n_layers = 2
# the first index is for the two models
params = torch.tensor(np.random.random((2, n_layers, n_wires, 3)), requires_grad=True)
iteration = 1

def softmax_ensemble(params, x_point=None):
    results = [q(params, x=x_point)for q in qnodes]
    softmax = torch.nn.functional.softmax(results, dim=1)
    choice = torch.where(softmax == torch.max(softmax))[0][0]
    return softmax[choice]

def cost(params, y_point, x_point=None):
    return torch.sum(torch.abs(softmax_ensemble(params, x_point=x_point) - y_point))

y_soft = torch.tensor(tf.one_hot(y_train, n_classes).numpy(), requires_grad=True)

opt = torch.optim.Adam([params], lr = 0.1) #learning rate 
for x_point, y_point in zip(x_train, y_soft):
    opt.zero_grad()
    c = cost(params, y_point=y_point, x_point=x_point)
    c.backward()
    opt.step()
    if iteration % 10 == 0 and iteration > 0:
        print("Iteration : ", iteration)
    iteration += 1
